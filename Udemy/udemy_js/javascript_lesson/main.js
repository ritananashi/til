// 'use strict';
/*
これを書くと、以降のコードはストリクトモードになる。
ストリクト＝厳しい。
過去の緩いルールの中に存在していたものから厳しめにすることで、
より良いコードを強制的に開発者に書かせる。
過去の不備を補ったものを書くことができる（補わないとエラーが起きるので）
過去のコードを動くようにしつつ、言語の不備を補うことができる。
'use strict';はディレクディブという名前になっている。
関数の一番先頭に'use strict';を書くと関数にのみストリクトモードが適用される。
*/
console.log(globalThis);
/*
consoleオブジェクトのlogメソッドが実行されている。
Javascriptエンジンは、JavaScriptのコードを読み込む前に自動的にいろんな
グローバルで使える関数やオブジェクトを最初に定義してくれている。
その定義したものを一覧で管理している。
オブジェクトで管理していて、そのオブジェクトの中にconsoleなどが定義されている。
このオブジェクトをグローバルオブジェクトという。
globalThisという変数を使うとグローバルオブジェクトを見ることができる。
ブラウザのコンソールではwindowやself、framesというプロパティを使ってグローバルオブジェクトにアクセスできる。
*/

var hello = 'hello';
var hello = 'hi';
function sayTomato() {
  var tomato = 'tomato'
}
var apple = 'apple';
console.log(apple);
/*
2015年までは定数constはなかった。
varとletには4つ違いがある。
varは同じ変数名を再定義できる。
letはブロック文の外部からアクセスできないが、barはアクセスできる。
関数の場合のみ、varでも関数の中でしかアクセスできない。
varで宣言されたものはグローバル変数の一つになる。
関数の中で宣言したときはグローバル変数にならない。
巻き上げられるときに初期値は巻き上げられない。変数名のみを巻き上げる。
関数宣言とvarは非常によく似た性質をもっているが、巻き上げの時に、
関数宣言は初期値ごと巻き上げられる。
*/


def to_hex(r, g, b)
  [r, g, b].sum('#') do |n|
    n.to_s(16).rjust(2, '0')
  end
end

# .to_sメソッドで整数を16進数に変換。
# 0を整数に変換するときは0一桁になってしまうので、
# rjustメソッドで右に寄せ、桁数を２桁で指定し、足りない桁を0で埋める。
# sumの初期値に先頭の文字'#'を指定。
# ブロックの中の処理をsumで順番に連結
# 繰り返し処理が終わったら、連結された文字列がsumメソッドの返り値になる。

def to_ints(hex) = hex.scan(/\w\w/).map(&:hex)

# 文字列から16進数の文字列を二つずつ取り出し、
# 2桁の16進数を10進数の整数に変換する
# 範囲オブジェクトで文字列を2文字ずつ取り出し
# 取り出した文字列を配列にいれ、mapメソッドを使って
# 要素を一つずつhexメソッドで10進数に変換。
# 返還後の値がmapメソッドの返り値になる
# scanメソッドは正規表現にマッチした文字列を配列にして返すメソッド
# リファクタリング前↓↓↓
# def to_ints(hex)
#   r = hex[1..2]
#   g = hex[3..4]
#   b = hex[5..6]
#   ints = []
#   [r, g, b].each do |s|
#     ints << s.hex
#   end
#   ints
# end